Simulation of Banker's Algorithm

	Initially on your cmd go to the path where you placed the java files and/or executable jar file.

If you will run this using the main class, type the following commands on the cmd.
1.) In case there are no .class files in your current directory, type
	javac *.java
2.) Then 
	java MP01v2

However, if you choose to run this using the executable jar file, type 
	java -jar MP01v2.jar
on your current directory.

	The program will initially promt you with a menu. Choose between Deadlock Prevention or Deadlock Avoidance or Quit. Selecting 1 or Deadlock Prevention will allow you to simulate Banker's Algorithm for deadlock prevention for a single resource. Same goes when you select 2 or Deadlock Avoidance. However in Deadlock Avoidance, there are multiple resources. Choosing 3 will quit or terminate the program.

1 - Deadlock Prevention
	You will be asked to enter the total number of processes and a single resources. After which a DeadlockPrevention object will be created. The size of the array of processes will be initialized to the total number of the processes you entered. The available will also be set to the second number that you entered. setProcesses() method will be called and you will be asked to enter the allocation for each process and these values will be stored in the processes array in the order you entered them. Note that you have to press 'Enter' everytime your desired value is already on screen. The bankers method is next called. Here, a finish array with the size of the total number of processes is created to ensure that a process in a particular index has been allocated/served. A safe sequence array is also created to store the processes that has been served according to its order. A temp variable is initialized to 0, this will ensure that all process has been checked. While the temp variable is less than the total number of processes, a boolean allocated is set to false, this will check whether the current process has been served. A for-loop is within the while-loop in order to traverse each of the processes. Inside this loop, there is a condition wherein if the current process or process[i] is less than or equal to the available is satisfied, i will be added to the safe sequence, done[i] will be true, allocated will be true and temp will increment. If temp will equal to the total number of processes, the system is therefore safe, STATUS: System is SAFE." and safe sequence will be displayed on screen. However, if the first condition is not satisfied, the loop will immediately terminate and "STATUS: System encountered a DEADLOCK." will be seen on screen.

2 - Deadlock Avoidance
	You will be asked to enter the total number of processes and resources. After which a DeadlockAvoidance object will be created. The size of the 2D arrays allocation, maximum and need will be initialized to the total number of the processes and resources you entered. setAllocation() method will be called and you will be asked to enter the allocation or resources in each process. Note that you have to press 'Enter' everytime your desired value is already on 
screen. Same goes when setMaximum() and setAvailable() are called. The program will calculate for the need matrix by need[i][j] = maximum[i][j] - allocation[i][j]. The allocation, maximum and need matrix will be displayed on screen. The bankers() method is next called. Here, a finish array with the size of the total number of processes is created to ensure that a process in a particular index has been served. A safe sequence array is also created to store the processes that has been allocated according to its order. A temp variable is initialized to 0, this will ensure that all process has been checked wether it can be allocated. While the temp variable is less than the total number of processes, a boolean allocated is set to false, this will check whether the current process has been allocated. A for-loop is within the while-loop in order to traverse each of the processes. Inside this loop, there is a condition wherein if the current process or process[i] is less than or equal to the available[i] is satisfied, there is another for-loop that will traverse each of the resources in processes[i]. updatedAvailabe[i][j], the available matrix that will keep on updating, will be added with the value of allocation[i]. Inside this condition, i will be added to the safe sequence, done[i] will be true, allocated will be true and temp will increment. If temp will equal to the total number of processes, the system is therefore safe, STATUS: System is SAFE." and the safe sequence will be displayed on screen. However, if the first condition is not satisfied, the loop will immediately terminate and "STATUS: System encountered a DEADLOCK." will be seen on screen. There is an option to make another request. If you choose to do so, you will be asked what process number and the allocation for each process of this request. Note that you can only request once. After entering values, banker's algorithm will be called.

**NOTE: Process numbers (also served as process names) starts from 0 to totalNumberOfResources - 1.